apply plugin: 'maven'
apply plugin: 'signing'

def artifactId = POM_ARTIFACT_ID
version = VERSION_NAME
group = GROUP

def get() {
  return hasProperty('RELEASE_REPOSITORY_URL') ? RELEASE_REPOSITORY_URL :
      "../repo/"
}

def isReleaseBuild() {
  return !VERSION_NAME.contains("SNAPSHOT")
}

def getReleaseRepositoryUrl() {
  return hasProperty('RELEASE_REPOSITORY_URL') ? RELEASE_REPOSITORY_URL :
      "../repo/"
}

def getSnapshotRepositoryUrl() {
  return hasProperty('SNAPSHOT_REPOSITORY_URL') ? SNAPSHOT_REPOSITORY_URL :
      "../repo/"
}

def getRepositoryUsername() {
  return hasProperty('REPOSITORY_USERNAME') ? SONATYPE_USERNAME : "admin"
}

def getRepositoryPassword() {
  return hasProperty('REPOSITORY_PASSWORD') ? SONATYPE_PASSWORD : "admin123"
}

def getDeveloperId() {
  return hasProperty('POM_DEVELOPER_ID') ? POM_DEVELOPER_ID : "Quvideo.inc"
}

def getDeveloperName() {
  return hasProperty('POM_DEVELOPER_NAME') ? POM_DEVELOPER_NAME : "Quvideo.inc"
}

def getPomDescription() {
  return hasProperty('POM_DESCRIPTION') ? POM_DESCRIPTION : "Quvideo.inc"
}

def getPackaging() {
  return hasProperty("POM_PACKAGING") ? POM_PACKAGING : "aar"
}

println("-----> Nexus http://nexus.quvideo.com/nexus/#view-repositories")
println("-----> Nexus Release -> " + getReleaseRepositoryUrl())
println("-----> Nexus SNAPSHOT-> ")
println("-----> implementation \'" + group + ":" + artifactId + ":" + version + "\'")

afterEvaluate { project ->
  uploadArchives {
    repositories.mavenDeployer {
      beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

      pom.groupId = GROUP
      pom.artifactId = POM_ARTIFACT_ID
      pom.version = VERSION_NAME

      repository(url: getReleaseRepositoryUrl()) {
        authentication(userName: getRepositoryUsername(), password: getRepositoryPassword())
      }
      snapshotRepository(url: getSnapshotRepositoryUrl()) {
        authentication(userName: getRepositoryUsername(), password: getRepositoryPassword())
      }
      pom.whenConfigured { pom ->
        pom.dependencies.forEach { dep ->
          if (dep.getVersion() == "unspecified") {
            println("---Jamin---> BuildFailed " + dep.getArtifactId() + " version " + dep.getVersion())
            throw Exception("BuildFailed " + dep.getArtifactId() + " version " + dep.getVersion())
          }
        }
      }

      pom.project {
        packaging getPackaging()
        description getPomDescription()

        developers {
          developer {
            id getDeveloperId()
            name getDeveloperName()
          }
        }
      }
    }
  }

  signing {
    required { isReleaseBuild() && gradle.taskGraph.hasTask("uploadArchives") }
    sign configurations.archives
  }

  if (project.getPlugins().hasPlugin('com.android.application') || project.getPlugins().
      hasPlugin('com.android.library')) {
    task install(type: Upload, dependsOn: assemble) {
      repositories.mavenInstaller {
        configuration = configurations.archives

        pom.groupId = GROUP
        pom.artifactId = POM_ARTIFACT_ID
        pom.version = VERSION_NAME

        pom.project {
          packaging getPackaging()
          description getPomDescription()

          developers {
            developer {
              id getDeveloperId()
              name getDeveloperName()
            }
          }
        }
      }
    }

    task androidSourcesJar(type: Jar) {
      from android.sourceSets.main.java.source
      classifier = 'sources'
    }
  } else {
    install {
      repositories.mavenInstaller {
        pom.groupId = GROUP
        pom.artifactId = POM_ARTIFACT_ID
        pom.version = VERSION_NAME

        pom.project {
          packaging getPackaging()
          description getPomDescription()

          developers {
            developer {
              id getDeveloperId()
              name getDeveloperName()
            }
          }
        }
      }
    }

    task sourcesJar(type: Jar, dependsOn: classes) {
      classifier = 'sources'
      from sourceSets.main.allSource
    }
  }

  if (JavaVersion.current().isJava8Compatible()) {
    allprojects {
      tasks.withType(Javadoc) {
        options.addStringOption('Xdoclint:none', '-quiet')
      }
    }
  }

  artifacts {
    if (project.getPlugins().hasPlugin('com.android.application') || project.getPlugins().
        hasPlugin('com.android.library')) {
      archives androidSourcesJar
    } else {
      archives sourcesJar
    }
  }
}